#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t reveal_title_slide:nil reveal_slide_number:nil reveal_progress:t reveal_history:t reveal_center:t reveal_single_file:t
#+REVEAL_THEME: solarized
#+REVEAL_ROOT: ../../vendor/reveal.js

* ABCs of GenStage
** Wadsworth's constant
- Aldric
- Exeq
** Learning objectives
- Explain what GenStage is
- Decide whether or not to use GenStage
- Set up a GenStage pipeline
* Mindset: "Flow of data"
And further: flow of data processing
* The ol' =Stream=
Literally, a stream of data.
* Distributing work with stdlib
Great choice if everything is already in memory anyway.
=Task.async_stream/3= (and =/5=)
** One pic == 1k words
[[./images/async_stream.png]]
** Limitations
- Stream
- One function
** An example
Use an external reverse geocoding service to get addresses from coordinates
* How can we extend this idea?
We want to make it scalable!

The new old buzzword.
* Pub/sub
Publish / subscribe
* Setting the stage (rimshot)
** Let me explain. No, there is too much. Let me sum up.
[[./images/pipeline-definitions.png]]
* Backpressure
- Consumers ask for data
- i.e. Producers produce on-demand /ONLY/.
* Okay, some code now
* Empty producer
#+BEGIN_SRC elixir
  defmodule Producer do
    use GenStage
    def start_link(), do: GenStage.start_link(__MODULE__, :ok)

    def init(:ok), do: {:producer, %{}}

    def handle_demand(demand, state) when demand > 0 do
      # calculate what we can return
      {events_to_produce, new_state} = magic(demand, state)
      {:noreply, events_to_produce, new_state}
    end

    defp magic(demand, state) do
      # Pay no attention to the man behind the curtain
    end
  end
#+END_SRC
* Producer-Consumer
#+BEGIN_SRC elixir
  defmodule ProducerConsumer do
    use GenStage
    def start_link() do
      GenStage.start_link(__MODULE__, :ok, subscribe_to: [Producer])
    end

    def init(:ok), do: {:producer_consumer, %{}}

    def handle_events(events, _from, state) do
      # Do something with the events
      new_events = magic(events)
      {:noreply, new_events, state}
    end

    defp magic(events) do
      # Pay no attention to the man behind the curtain
    end
  end
#+END_SRC
* Consumer
#+BEGIN_SRC elixir
  defmodule Consumer do
    use GenStage
    def start_link() do
      GenStage.start_link(__MODULE__, :ok, subscribe_to: [ProducerConsumer])
    end

    def init(:ok), do: {:consumer, :something_has_to_be_the_state}

    def handle_events(events, _from, state) do
      # Do something with the events
      _final_step = magic(events)
      # Have to return an empty list
      {:noreply, [], state}
    end

    defp magic(events) do
      # Pay no attention to the man behind the curtain
    end
#+END_SRC
* Pitfall: callbacks
All regular runtime callbacks return new events.
#+BEGIN_SRC elixir
  def handle_cast(msg, state) do
    # something
    {:noreply, new_events, state}
  end

  def handle_call(msg, from, state) do
    # something
    {:reply, reply, new_events, state}
  end
#+END_SRC
* The devil is in the details
* Dispatchers
How the producer knows what to do

Built-in:
- broadcast (send to all)
- demand (send to highest demand)
- partition (send to partitions)
* Demand
=:max_demand= and =:min_demand=
* Automatic vs. manual demand
** Automatic
Default behavior
** Manual
=GenStage.handle_subscribe/4= returns ={:manual, state}=

Trigger more demand with =GenStage.ask/4=
